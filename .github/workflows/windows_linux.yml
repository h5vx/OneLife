name: CI

on: 
  #schedule:
  #  - cron: '0 10 * * * '
  #  - cron: '0 * * * * '
  push:
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        haxe: [4.1.0]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: packages
        run: sudo apt-get install git g++ imagemagick xclip libsdl1.2-dev libglu1-mesa-dev libgl1-mesa-dev mingw-w64
      - name: scripts
        run: |
          cd scripts/hetuwScripts
          echo "1"
          chmod +x hetuwPullLatest.sh
          echo "2"
          ./hetuwPullLatest.sh windows 3
          echo "3"
          ./hetuwPullLatest.sh linux 1
          echo "4"
          ./hetuwCompileAll.sh
          echo "5"
      - name: test dir
        run: |
          cd scripts/hetuwScripts
          ls
          echo "_________________"
          cd bin
          ls
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: OneLife_v371
          release_name: OneLife_v371
          body: |
            In order to install, you already need to have the normal version of the game.
            Then download the binary "OneLifeApp_H_windows" and place it inside your One Hour One Life folder.
            For steam users this folder is at C:\Program Files (86x)\Steam\steamapps\common\One Hour One Life

            Then execute the downloaded binary

            If you run into problems, please search in your ohol folder for cache.fcz and delete all that contain that name.
            Then log in once with the normal client, before starting the mod.
      - name: upload linux #LINUX
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./scripts/hetuwScripts/bin/OneLifeApp_H_linux
          asset_name: OneLifeApp_H_linux
          asset_content_type: application/zip
      - name: upload windows #WINDOWS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./scripts/hetuwScripts/bin/OneLifeApp_H_windows.exe
          asset_name: OneLifeApp_H_windows.exe
          asset_content_type: application/zip
